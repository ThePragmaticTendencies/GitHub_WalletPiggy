<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackUpInfo.Text" xml:space="preserve">
    <value>Back-Up Info</value>
  </data>
  <data name="BackUpNOOKbutton.Text" xml:space="preserve">
    <value>Clear DataBase</value>
  </data>
  <data name="BackUpOKbutton.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="BackUpStory.Text" xml:space="preserve">
    <value>Back-up option can be performed only with available SD card installed in the device. At least till I will fix it..
Clearing whole data-base is available for all of the devices right now, not big advantage though.
If something goes wrong, don't worry! Changes will be permanent only after adding/deleting costs in the app, so to undo them just close the app and re-run (to close means, to terminate it from background).
To perform back-up obtain JSON format data-base file (costDB.json) via e-mail (just send it with button above) or copy it from the WalletPiggy automatic folder location ("..\SD card\WalletPiggy_BackUps").
Next step is to paste this file (don't change the original name) into "..\SD card\WalletPiggy_BackUps\LoadFromHere".
When all of this is done, close the app and when running it again, in the upper left side of the loading screen "+" symbol button is visible for about a second - tap it and follow the instructions.
To clear the data-base, leave the "..\LoadFromHere" folder empty, tap the "+" button on loading screen and.. follow the instructions.</value>
  </data>
  <data name="BackUpTERMINATEbutton.Text" xml:space="preserve">
    <value>EXIT</value>
  </data>
  <data name="Contact.Text" xml:space="preserve">
    <value>Contact: ThePragmaticTendencies@gmail.com</value>
  </data>
  <data name="CostsHeader.Text" xml:space="preserve">
    <value>Costs will show here!</value>
  </data>
  <data name="CostsHeaderSubtitle.Text" xml:space="preserve">
    <value>Hold cost to delete.</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Language/Currency.Text" xml:space="preserve">
    <value>Language / Currency</value>
  </data>
  <data name="MonthlySummary.Text" xml:space="preserve">
    <value>Monthly Summary</value>
  </data>
  <data name="NOOK.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OK.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="PreviousMonth.Text" xml:space="preserve">
    <value>Previous Month</value>
  </data>
  <data name="SendCostsInCSV.Text" xml:space="preserve">
    <value>Send Costs in CSV via e-mail</value>
  </data>
  <data name="SendJSONBackUp.Text" xml:space="preserve">
    <value>Send JSON Back-up via e-mail</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Settings_NotificationTextBlock.Text" xml:space="preserve">
    <value>Restart application for change to take effect</value>
  </data>
</root>